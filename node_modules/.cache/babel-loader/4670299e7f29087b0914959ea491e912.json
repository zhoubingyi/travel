{"remainingRequest":"/Users/zhoubingyi/Desktop/travel/node_modules/babel-loader/lib/index.js!/Users/zhoubingyi/Desktop/travel/src/utils/http.js","dependencies":[{"path":"/Users/zhoubingyi/Desktop/travel/src/utils/http.js","mtime":1580736682312},{"path":"/Users/zhoubingyi/Desktop/travel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoubingyi/Desktop/travel/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport qs from 'qs';\nimport { getCookie } from \"../utils/auth\";\n\nvar _this = this;\n\naxios.defaults.timeout = 3000000; // 请求超时时间\n\naxios.defaults.baseURL = process.env.VUE_APP_BASE_API;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'; // post请求头的设置\n\naxios.defaults.headers.common[\"token\"] = getCookie(\"token\") ? getCookie(\"token\") : \"\"; // axios respone拦截器\n\naxios.interceptors.response.use(function (response) {\n  // debugger\n  // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n  // 否则的话抛出错误 结合自身业务和后台返回的接口状态约定写respone拦截器\n  // Indicator.close()\n  if (response.status === 200) {\n    return Promise.resolve(response.data);\n  } else {\n    Toast({\n      message: response.data.msg,\n      position: 'middle',\n      duration: 2000\n    });\n    return Promise.reject(response.data);\n  }\n}, function (error) {\n  var responseCode = error.response.status;\n\n  switch (responseCode) {\n    // 401：未登录\n    case 401:\n      break;\n    // 404请求不存在\n\n    case 404:\n      Toast({\n        message: '网络请求不存在',\n        position: 'middle',\n        duration: 2000\n      });\n      break;\n\n    default:\n      Toast({\n        message: error.response.data.message,\n        position: 'middle',\n        duration: 2000\n      });\n  }\n\n  return Promise.reject(error.response);\n});\n/**\n * 封装get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\nfunction get(url) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  }); // 或者return axios.get();\n}\n/**\n * post方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\n\nfunction post(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.post(url, qs.parse(params)).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  }); //  或者return axios.post();\n}\n/**\n * form方法，对应form请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\n\n\nfunction form(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.post(url, qs.stringify(params)).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  }); //  或者return axios.post();\n}\n\nexport { get, post, form };",{"version":3,"sources":["/Users/zhoubingyi/Desktop/travel/src/utils/http.js"],"names":["axios","qs","getCookie","_this","defaults","timeout","baseURL","process","env","VUE_APP_BASE_API","headers","post","common","interceptors","response","use","status","Promise","resolve","data","Toast","message","msg","position","duration","reject","error","responseCode","get","url","params","then","res","catch","err","parse","form","stringify"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\nimport {getCookie} from \"../utils/auth\";\nvar _this=this;\n\naxios.defaults.timeout = 3000000  // 请求超时时间\naxios.defaults.baseURL = process.env.VUE_APP_BASE_API\naxios.defaults.headers.post['Content-Type'] =\n    'application/x-www-form-urlencoded;charset=UTF-8' // post请求头的设置\naxios.defaults.headers.common[\"token\"]=getCookie(\"token\")?getCookie(\"token\"):\"\"\n// axios respone拦截器\naxios.interceptors.response.use(\n    response => {\n        // debugger\n        // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\n        // 否则的话抛出错误 结合自身业务和后台返回的接口状态约定写respone拦截器\n        // Indicator.close()\n        if (response.status === 200) {\n            return Promise.resolve(response.data)\n        } else {\n            Toast({\n                message: response.data.msg,\n                position: 'middle',\n                duration: 2000\n            });\n            return Promise.reject(response.data)\n        }\n    },\n    error => {\n        const responseCode = error.response.status\n        switch (responseCode) {\n            // 401：未登录\n            case 401:\n                break\n            // 404请求不存在\n            case 404:\n                Toast({\n                    message: '网络请求不存在',\n                    position: 'middle',\n                    duration: 2000\n                });\n                break\n            default:\n                Toast({\n                    message: error.response.data.message,\n                    position: 'middle',\n                    duration: 2000\n                });\n        }\n\n        return Promise.reject(error.response)\n    }\n)\n/**\n * 封装get方法，对应get请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nfunction get (url, params = {}) {\n    return new Promise((resolve, reject) => {\n        axios\n            .get(url, {\n                params: params\n            })\n            .then(res => {\n                resolve(res.data)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n    // 或者return axios.get();\n}\n/**\n * post方法，对应post请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nfunction post (url, params) {\n    return new Promise((resolve, reject) => {\n        axios\n            .post(url, qs.parse(params))\n            .then(res => {\n                resolve(res.data)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n    //  或者return axios.post();\n}\n/**\n * form方法，对应form请求\n * @param {String} url [请求的url地址]\n * @param {Object} params [请求时携带的参数]\n */\nfunction form (url, params) {\n    return new Promise((resolve, reject) => {\n        axios\n            .post(url, qs.stringify(params))\n            .then(res => {\n                resolve(res.data)\n            })\n            .catch(err => {\n                reject(err)\n            })\n    })\n    //  或者return axios.post();\n}\nexport { get, post, form }\n"]}]}